~~LANG:FR@frman:ref-plugins/tplplugins/modifiers~~

All template modifiers bundled with Jelix. Modifiers are functions which modify
the display of the content of a variable in a template.

===== cat =====

This modifier allow to concatenate a string to a variable.

Here is a variable @@$foo@@ having the value @@'bar'@@:

<code php>
$rep->body->assign('foo', 'bar');
</code>

If we want to concatenate the string @@'hello'@@ to the variable @@$foo@@:

<code html>
<p>{$foo|cat:'hello'}</p>
</code>

The result will be:

<code html>
<p>barhello</p>
</code>

===== count_* =====

Several modifiers allow to count things into a variable:

* @@count_characters@@: to count characters
* @@count_paragraphs@@: to count paragraphs
* @@count_sentences@@: to count sentences
* @@count_words@@: to count words.

An example. Here is a variable @@$foo@@ having the value @@'bar'@@:

<code php>
$rep->body->assign('foo', 'bar');
</code>

In the template:

<code html>
<p>$foo contains {$foo|count_characters} characters</p>
</code>

The result:

<code html>
<p>$foo contains 3 characters</p>
</code>

With the other modifiers:

<code html>
<p>{$foo|count_paragraphs} paragraphs</p>
<p>{$foo|count_sentences} sentences</p>
<p>{$foo|count_words} words</p>
</code>

===== eschtml =====

This is an important modifier: it escapes the content of a variable for HTML.
In fact, it executes @@htmlspecialchars()@@.

Use it on untrusted contents, to avoid XSS issues or else!


===== indent =====

This modifier add indentation into a text of a variable.

Here is a text that we inject into a template:

<code php>
$foo = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Vivamus ornare, enim bibendum mollis interdum." 
$rep->body->assign('foo', $foo);
</code>

Let's display it into the template:

code smarty>
<pre>
{$foo|indent}
</pre>
</code>

The result will be:

<code html>
<pre>
    Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Vivamus ornare, enim bibendum mollis interdum.
</pre>
</code>

There are two optional parameters:

  * the number of character to repeat. By default it is 4.
  * the character to repeat. By default, a space.

<code smarty>
{$foo|indent:"15"}
</code>

Will be:

<code>
               Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
               Vivamus ornare, enim bibendum mollis interdum.
</code>

And 

<code smarty>
{$foo|indent:"5":"-"}
</code>

will be:

<code>
-----Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
-----Vivamus ornare, enim bibendum mollis interdum.
</code>


===== jdatetime =====

The jdatetime modifier permit to convert a date string in a format to another
one. This modifier use the [[/class-utilities/jdatetime|jDateTime class]].

Without parameter, this modifier expect a database string
format (@@jDateTime::BD_DTFORMAT@@) and return a date in selected language format
(@@jDateTime::LANG_DTFORMAT@@).

<code smarty>
  <p>this date are {$myDate|jdatetime}.</p>
</code>

if $myDate='2017-04-12 01:05:26' an if language are en, then it display

<code>
 this date are 12/04/2017 01h05mn26s.
</code>

To use another formats, you have to use one of this string in modifier parameter :

^ parameter ^ constant in jDateTime class ^ format ^
| 'lang_date' | jDateTime::LANG_DFORMAT | date format of current application lang (with //en//, this is mm/dd/yyyy) |
| 'lang_datetime' | jDateTime::LANG_DTFORMAT | date and time format of current application lang |
| 'lang_time' | jDateTime::LANG_TFORMAT | time format of current application lang |
| 'db_date' | jDateTime::DB_DFORMAT |date of classic database style : "YYYY-MM-DD" |
| 'db_datetime' | jDateTime::DB_DTFORMAT | date and time of classic database style : "YYYY-MM-DD HH:mm:SS" |
| 'db_time' | jDateTime::DB_TFORMAT | timeof classic database style : "HH:mm:SS" |
| 'iso8601' | jDateTime::ISO8601_FORMAT | format ISO8601 |
| 'timestamp' | jDateTime::TIMESTAMP_FORMAT | integer, number of seconds since 1/1/1970 (timestamp) |
| 'full_lang_date' | jDateTime::FULL_LANG_DATE | full format date (i.e. day of week and month in letter) respecting language conventions (ex: thursday, may 27th 2017) |


The first parameter is the format of date string to convert, the second one, the
format to display.

<code smarty>
  <p>this date are {$myDate|jdatetime:'db_date':'timestamp'}.</p>
</code>

if @@$myDate='2006-04-15'@@ then it display

<code>
 this date are 1145052000.
</code>

===== mailto =====

this modifier permits to display a link to the user's email in the form of your choice :

several options can be used for that: 
  * displaying an email in a classic form
<code smarty>
{mailto array('address'=>'me@domain.com')}
</code>
  * displaying an email encoded in javascript 
<code smarty>
{mailto array('address'=>'me@domain.com', 'encode'=>'javascript')}
</code>
  * displaying an email encoded in hexa
<code smarty>
{mailto array('address'=>'me@domain.com', 'encode'=>'hex')}
</code>
  * displaying an email following by the subject of this onejavascript 
<code smarty>
{mailto array('address'=>'me@domain.com', 'subject'=>'Hello to you!')}
</code>
  * displaying an email with 'cc' on severals email
<code smarty>
{mailto array('address'=>'me@domain.com', 'cc'=>'you@domain.com,they@domain.com')}
</code>
  * additionals options are available, like a CSS class 
<code smarty>
{mailto array('address'=>'me@domain.com', 'extra'=>'class="mailto"')}
</code>


===== number_format =====

This modifier format a number to be displayed like explains in the PHP doc
[[phpapi:number_format]] 

For example :

<code smarty>
{number_format $number, 2, '.', ''}
</code>

===== regexp_replace =====

It replaces a string by an other by using a regular expression. 


<code>
$myVar = 'TOTOO';

{$maVar|regex_replace:'/O/':'ii'}
</code>

The string @@TOTOO@@ will be transformed to @@tiitiiii@@.

===== spacify =====

It insert a letter between each letters.

<code>
{assign $mytext = 'Hello_everybody'}
{$mytext|spacify:}
</code>

Result: @@H e l l o _ e v e r y b o d y@@.

<code>
{assign $mytext = 'Hello_everybody'}
{$mytext|spacify:'.'}
</code>

Result: @@H.e.l.l.o._.e.v.e.r.y.b.o.d.y@@.

===== printf =====

Transform a string by using the sprintf function.

<code>
{assign $mytext = 'Hello everybody'}
{$mytext|sprintf:'my format %s'}
</code>

Result : @@my format Hello everybody@@.

===== strip =====

It removes extra space from the string.

<code>
{assign $mytext = 'Bonjour  tout      le   monde'}
{$mytext|strip}
</code>

Result : @@Bonjour tout le monde@@

<code>
{assign $mytext = 'Bonjour tout le     monde'}
{$mytext|strip:';'}
</code>

Result : @@Bonjour tout le;monde@@


===== truncate ===== 

Modifier that truncates a string to a certain length if necessary, optionally
splitting in the middle of a word, and appending an ending string like @@'...'@@.

<code>
{assign $mytext = 'Bonjour tout le monde'}
{$mytext|truncate}
</code>

Result: @@Bonjour tout le monde@@

<code>
{assign $mytext = 'Bonjour tout le monde'}
{$mytext|truncate:10}
</code>

Result: @@Bonjour...@@

<code>
{assign $mytext = 'Bonjour tout le monde'}
{$mytext|truncate:10:'[...]'}
</code>

Result: @@Bonjour[...]@@

If you are agree to cut at the middle of a word:

<code>
{assign $mytext = 'Bonjour tout le monde'}
{$mytext|truncate:10:'...':true}
</code>

Result: @@Bonjour to...@@

===== truncatehtml ===== 


Modifier that cuts a html formated string and close all opened tags so that it
doesn't inpact on the rest of the page.

You should use this modifier in a zone so that the return value is cached.

<code smarty>
{$mytext|wordwrap} 
{$mytext|truncatehtml:150:"\n<a href="...">read full article</a>"} 
{$mytext|truncatehtml:45} 
</code>

===== wiki =====

This modifier convert a string having wiki content, to html. It uses the
[[/class-utilities/jwiki|jWiki class]].

By default it convert from the "wr3" syntax to html.


<code smarty>
  <p>{$message|wiki}</p>
</code>

If @@$message@@ is 

<code>
===== title =====

A word in __bold__.
</code>

The result will be 

<code html>
<h1>title</h1>

<p>A word in <strong>bold</strong></p>
</code>


===== html:nl2br =====

It replace all line return characters by the html element @@<br/>@@.

For example, here is a text:

<code php>
$foo = "Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit." 
$rep->body->assign('foo', $foo);
</code>

And a template:

<code smarty>
<p>{$foo|nl2br}</p>
</code>

The result is:

<code html>
<p>Lorem ipsum dolor sit amet,<br/>consectetuer adipiscing elit.</p>
</code>
