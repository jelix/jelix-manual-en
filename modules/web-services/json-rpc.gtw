~~LANG:FR@frman:modules/services-web/json-rpc~~

Jelix supports [[http://json-rpc.org/|json-rpc]]. This is a similar protocol to
XML-RPC. The main differences is that data are JSON formatted instead of XML.
(RPC = Remote Procedure Call)

See [[xml-rpc|Xml-rpc documentation]].

===== Specific entry point =====

A JSON-RPC request cannot be treated as a classic request, thus you can't use
[[/core/request-object|"classic" request object]]. You have to create a specific
entry point in @@F@www/@@ directory, @@F@jsonrpc.php@@. This entry point should
instantiate a @@C@jJsonRpcRequest@@ instead of a @@C@jClassicRequest@@.

Use the command @@app:create-entrypoint@@, by indicating the type @@jsonrpc@@:

<code bash>
php dev.php app:create-entrypoint --type=jsonrpc jsonrpc.php
</code>

It will create the entrypoint @@jsonrpc.php@@ into your @@www/@@ directory,
and will declare it into the @@urls.xml@@ and @@framework.ini.php@@ files.

Then you retrieve an url for a jsonrpc action like this:

<code php>
  $url = jUrl::get("module~action@jsonrpc");
</code>

===== Controller =====

As JSON-RPC is a specific request type, a controller filename must be suffixed
by  ".jsonrpc.php". A "default" controller  file would be:
"default.jsonrpc.php". (it can co-exists with a "default" classic controller
such as "default.classic.php").

Controller content is similar to those of a classic controller. You just have to
use a jResponseJsonRpc response (alias:"jsonrpc"):

<code php>
class defaultCtrl extends jController {

  function index(){

    $resp = $this->getResponse('jsonrpc');

    // any data types : integer, string, array, objects...
    $data_php = ... ;

    $resp->response = $data_php;

    return $resp;

  }
}
</code>



=====  Client request =====

To send a jsonrpc request, as specified in [[http://json-rpc.org/|json-rpc spec]], 
you have to use a specific json string:

<code>
{ method : "",
  id:"",
  params: {}
}
</code>

The @@method@@ parameter indicates which action to execute. In a Jelix
application, it must be an action selector:

<code>
method:"myModule~default:index"
</code>

Data of the @@params@@ parameter will be assigned to the @@params@@ member of
your response. In your action, you will access them like this:

<code php>
  $parameters = $this->param('params');
</code>

Of course, @@$parameters@@ will contain "php" datas. The JSON string is decoded
by @@C@jJsonRpcRequest@@..

In your HTML pages, you have to convert your Javascript data into a JSON string.
To do it, you should use the @@JSON@@ object, and call its method @@stringify@@.
Pass the result to xmlHttpRequest to send the JSONRPC request to Jelix.
And to convert a JSON string to Javascript data, you should use @@JSON.parse()@@.

An HTMl example:

<code javascript>
 var jsonrpc = { method : "myModule~default:index",
    id:"1",
    params: null
 };

 var toSend = JSON.stringify(jsonrpc);
 var p = new XMLHttpRequest();
 p.onload = null;
 p.open("POST", "http://mysupersite.tld/jsonrpc.php", false);
 p.send(toSend);

 var response = JSON.parse(p.responseText);
 var result = reponse.result;
</code>

And in your jelix action, if you do: 

<code php>
  $resp->response = "hello";
</code>

In your javascript example, @@result@@ variable content will be @@"hello"@@.
