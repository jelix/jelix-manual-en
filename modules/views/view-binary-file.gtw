~~LANG:FR@frman:modules/vues/vue-binary~~

To send binary content to the user (a graphic, a video, some sound, an archive, etc.),
@@C@jResponseBinary@@ should be used. To use it, indicate @@'binary'@@ as the type of
response.

<code php>
$resp = $this->getResponse('binary');
</code>

Afterwards, some variables need to be set to a correct value before content is
displayed.

First, you have to set @@P@outputFileName@@ property. @@P@outputFileName@@ will
be the name shown to the user. 

<code php>
 $resp->outputFileName = 'filename.gif';
</code>

Next, you can define the mime type of your content:

<code php>
 $resp->mimeType = 'image/gif';
</code>

You have an option for files you want the user to download (particularly, files
not rendered by common browsers - archives, for example). To force the download
of the file, simple set @@P@doDownload@@ to true.

<code php>
 $resp->doDownload = true;
</code>

For the content itself, you have to define either @@filename@@ or @@content@@ property. 

If it is an existing file, just use @@P@filename@@:
     
<code php>
   $resp->fileName = jApp::varPath('file_to_send.gif');
</code>

Otherwise, if your content is generated or comes from your database, use @@P@content@@:

<code php>
   $resp->content = '...';
</code>

However, it will take as much memory as the size of the content, so it could be an issue if the content
is huge. PHP could stop the script if there is not enough memory.

For huge content, it is better to send it directly during the reading of the data source, when Jelix will
want to send it to the browser.

There are two methods on @@jResponseBinary@@. Use @@setContentCallback()@@ to give a callback function that will
fetch the content from somewhere and return it to the PHP output. Or use @@setContentGenerator()@@ to give an iterator
or a generator.

Here is an example, by sending to the browser the response of an HTTP request made with GuzzleHttp:

```php

// we prepare and send the HTTP request to a specific service
$client = new GuzzleHttp\Client();
$request = new GuzzleHttp\Psr7\Request('GET', 'https://foo.example/content', $headers);
$response = $client->send($request, ['stream' => true]);

// we retrieve the http response as a stream, that is not consumed yet.
$stream = $response->getBody();

$rep = $this->getResponse('binary');

// we give a callback function that read the stream and send it to the PHP output (`php://output`),
// with copyToStream
$rep->setContentCallback(function () use ($response) {
    $output = Psr7\Utils::streamFor(fopen('php://output', 'w+'));
    Psr7\Utils::copyToStream( $response->getBody(), $output);
});
// ..
return $rep;
```

An other example with a generator

```php

class Business {

    // this function is a generator, because of the use of yield
    public function getAllData()
    {
        $db = jDb::getConnection();
        $resultSet = $db->query("SELECT field1, field2, field3 FROM hugeTable")
        foreach($resultSet as $record) {
            yield $record->field1.';'.$record->field2.';'.$record->field3."\n";
        }
    }
}

// Into the controller:

$obj = new Business();

$rep = $this->getResponse('binary');
$rep->setContentGenerator($obj->getAllData());
// ..
return $rep;
```

