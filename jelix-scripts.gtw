~~LANG:FR@frman:jelix-scripts~~

Jelix provides some CLI script, @@F@lib/jelix-scripts/createapp.php@@, allowing you to create a new application, and @@F@cmd.php@@ inside your application allowing to execute commands on your application. Particularly, you are able to create and modify some files easily and automatically.

This scripts should be called from a console, in a command line, so the command line version of PHP (PHP-CLI) should be installed and configured.


===== Configuration of PHP-CLI =====

==== On Debian/Ubuntu/other linux distro ====

You should install the **php5-cli** package to execute a PHP script on a command line.

Careful, in most distro, particularly in Debian/Ubuntu, the configuration file of PHP, @@F@php.ini@@, is not the same for Apache, and for the command line version of PHP. So don't forget to configure same important parameters in these two php.ini, and to activate same php extensions. Under Debian/Ubuntu, these two files are @@F@/etc/php5/apache2/php.ini@@ and @@F@/etc/php5/cli/php.ini@@. Note that for this distro, extensions configurations are shared between apache and cli, in a @@F@conf.d@@ directory.

==== With MAMP (MacOS X) ====

The MAMP software provides PHP-Cli. Perhaps there is also an other PHP-CLI already installed un MacOS. And then, the problem is that PHP-CLI for MAMP is not configured to access to the MAMP mysql.

The solution:

   * open the file @@F@.profile@@ stored into your home directory (@@F@/Users/your_login/@@)
   * Modify the line where the PATH variable is defined, or add it. The goal is to add some path in this variable (@@/Applications/MAMP/Library/bin:/Applications/MAMP/bin/php5.3/bin@@). The line should look like to this:
<code>
export PATH=/Applications/MAMP/Library/bin:/Applications/MAMP/bin/php5.3/bin:$PATH
</code>
If it was already exist, some other paths were probably defined, keep them. In all case, the @@$PATH@@ should be at the end.

==== Configuration of PHP-Cli under windows ====


Depending of the package you use (WAMP or others), your php.exe may not found its php.ini file. The CLI version of php and the apache version of PHP do not share the same php.ini file. So  you should create it for php.exe and/or configure it to activate same extensions as the apache php. Else you could have some errors like "unknow mysql_connect function" or "unable to connect to localhost" etc.


You have also to add the path to the php-cli binary in the PATH variable of your system.

   * right click on the icon of computer, then choose properties
   * In the system properties dialog, click on the tab "advanced", then on the button to see the environment variables.
   * In "system variable", click on the PATH variable
   * Change the value of the PATH variable, by adding the path to the directory of the binary of php.exe. With WAMP for example, add @@F@c:\wamp\bin\php\php5.3.13\@@. Don't forget to add a ";" to separate all pathes.
   * validate and close the dialog
   * reboot

Then you can call php.exe from any directory, and from the jelix-scripts directory.




===== Using cmd.php =====

This script, stored in your application, must be invoked with the command line version of PHP. So, open a console (cmd.exe under windows) and go to the directory of your application, @@F@myapp/@@:

With Linux/Mac:
<code bash>
   cd myapp/
</code>
With Windows:
<code bash>
   cd myapp\
</code>

Then, type this kind of command line:

With Windows:
<code bash>
> php.exe cmd.php  command_name [options] [parameters]
</code>

With linux:
<code bash>
$ php cmd.php command_name [options] [parameters]
</code>

In next examples, we only show for linux, but parameters will be identical for windows.


==== command_name ====

You should always call @@F@cmd.php@@ with a "jelix command" name, and optionally some options and/or parameters.

First, you access help on all available commands with the @@help@@ command:

<code bash>
   php cmd.php help
</code>

==== The option -ep ====

For some commands, it is useful to indicate for which entrypoint the command should be applied. To do it, you have to indicate the name of the entrypoint after the option "-ep":

<code bash>
  php cmd.php installmodule -ep admin.php foo
</code>

It will install the foo module, only for the entry point "admin" of the application. (you can write admin or admin.php)

The entry point should be declared in the project.xml file of the application.



==== l'option -v ====

This is an option available for all commands since Jelix 1.3.3. It allows you to display all details about what the command did after its execution.
By default, a command displays nothing except errors. If you want to display details each time you launch a command, you can modify the configuration of jelix-scripts with the parameter @@verboseMode=true@@. See below.

===== Changing the default configuration =====

Commands creating new files or directories follow a specific tree structure. Perhaps you may want to organize your files in a different manner. Also, there are some customizable infos stored in header comments of files, like your name, the project name and so on. You can configure all of these informations.

In @@F@lib/jelix-scripts/templates/@@, there is a file @@F@jelix-scripts.ini@@. You can copy it in two places, by renaming it to @@F@.jelix-scripts.ini@@.

   * into one of the parent directory of the application
   * into your home directory (@@F@/home/yourlogin/@@ for example in Linux or @@F@c:\Users\yourlogin\@@ with windows 7)

Jelix-scripts searches a @@F@.jelix-scripts.ini@@ in the current directory and its parent directories, before searching in the home directory.

You can then modify it by changing different values. If you want different values for each application, create section in the file, named with the name of the application, and set values in it.

<code ini>
[myapp]
incofCopyright=2012 my company
</code>


===== List of available commands =====

here is a list of some commands

   * Main commands
<code>
php cmd.php COMMAND [-v] [-ep ENTRYPOINT] [OPTIONS] [PARAMETERS]
</code>
   * Creation of one module
<code>
php cmd.php createmodule [MyModule]
</code>
   * Creation of one dao
<code>
php cmd.php createdao [MyModule] [MyDao] [MyTable]
</code>
   * Creation of one class based upon a dao
<code>
php cmd.php createclassfromdao [MyModule] [MyClass] [MyDao]
</code>
   * Creation of one form (empty of from a dao, with or without locales)
<code>
php cmd.php createform [MyModule] [MyForm] [MyDao] 
</code>
   * Creation of a zone (with or without a template)
<code>
php cmd.php  createzone [-notpl] [MyModule] [MyZone] [MyTemplate] 
</code>
   * Creation of one CRUD, create dao, form and CRUD controller
<code>
php cmd.php createdaocrud module table controller_name
</code>
