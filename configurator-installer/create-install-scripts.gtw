~~LANG:FR@frman:configurateur-installateur/creer-script-installation~~

Jelix provides a configuration and installation system, which allows to execute
scripts when you integrate a module into your application, or when you install
your application on a server.


===== How a module is installed =====


When you install a module with the @@module:install@@ or the @@app:install@@ command:

   * Jelix keep a backup of @@F@var/config/installer.ini.php@@
   * jelix looks at the @@modules@@ section inside the main configuration and
     retrieve the access value of the module
   * It will launch the installation of a module if its access value is higher than 0
   * It then looks at the @@F@var/config/installer.ini.php@@ file: it checks if
     the module is already installed
   * If it is already installed, it will execute all scripts of update provided
     by the module, corresponding to a version between the installed version and
     the new version of the module, and then the main update script, @@upgrade.php@@
     if it is provided.
   * If it is not already installed, it will execute the installation script
     provided by the module, @@install.php@@
   * After the installation or the update, Jelix stores the new version number
     of the module into @@F@installer.ini.php@@.

Of course, installation scripts or scripts of update are not required.

But if you provide them, **it is very important to store into the** @@module.xml@@
file, **a good version number and the date of the release **!

===== An installation script =====

This is a file, @@F@install.php@@, that you store into the @@F@install/@@
directory of the module.

It should contain a class, inheriting from @@C@jInstallerModule2@@, and named
@@C@{module}ModuleInstaller@@, where @@{module}@@ should be the name of the
module. Ex: @@C@mainModuleInstaller@@ for the @@main@@ module.

Note: @@C@jInstallerModule2@@ is a new class in Jelix 1.7, and the @@C@jInstallerModule@@ class
is now deprecated. These two classes have not the same methods. 

In your new class, you need to create a method @@M@install()@@ where you'll do all
things to install the module: database modifications, file copies, configuration
changes etc..


<code php>
<?php
class newsModuleInstaller extends jInstallerModule2 {

    function install() {
        $db = $this->dbConnection();
        $db->exec('CREATE TABLE...');
    }
} 

</code>

You can redefine the methods @@M@preInstall()@@ and @@M@postInstall()@@, which are
executed respectively before and after the installation of all modules.
In @@preInstall()@@ you can prepare some data or files, or you can check that
conditions to install the module are met. It not, you can create an exception
which will stop the whole installation.

<code php>
<?php
class newsModuleInstaller extends jInstallerModule2 {

    function preInstall() {
    }

    function install() {
    }

    function postInstall() {
    }
} 

</code>

You can also redefines methods that allow to disinstall the module:

<code php>
<?php
class newsModuleInstaller extends jInstallerModule2 {

    function preUninstallEntryPoint(jInstallerEntryPoint2 $entryPoint) {
    }

    function uninstallEntryPoint(jInstallerEntryPoint2 $entryPoint) {
    }

    function postuninstallEntryPoint(jInstallerEntryPoint2 $entryPoint) {
    }
}
</code>

They will be called when the command @@php dev.php module:uninstall <module>@@ is executed.

@@C@jInstallerModule2@@ contains a number of properties and method which helps
you to access to the database, to the configuration file etc..

==== modifying configuration files ====

A Jelix application [[/configuration/configuration-files|has several ini files]]. You should not modify these
files yourself, but you should use objects like @@\Jelix\IniFile\IniModifierArray@@
that the install component gives to you.

An object @@IniModifierArray@@ contains some objects @@\Jelix\IniFile\IniModifier@@,
each of them correspond to an ini file. @@IniModifierArray@@ is an aggregator of ini 
files which allows to see values as Jelix sees them when it merges ini files.

   * @@$this->globalSetup->getConfigIni()@@ aggregate @@defaultconfig.ini.php@@ (provided by jelix)
     with your @@app/system/mainconfig.ini.php@@.
   * @@$this->globalSetup->getLocalConfigIni()@@, like @@getConfigIni()@@ with
     @@var/config/localconfig.ini.php@@
   * @@$entryPoint->getConfigIni()@@: aggregate @@defaultconfig.ini.php@@, @@mainconfig.ini.php@@
     and the entrypoint configuration file (like @@app/system/index/config.ini.php@@).
   * @@$entryPoint->getLocalConfigIni()@@ : like  @@$entryPoint->getConfigIni()@@,
     with the additionnal @@localconfig.ini.php@@ and the local file of the entry point
     like @@var/config/index/config.ini.php@@.

With these objects, you can read and modify the files:

<code>
    $value = $this->globalSetup->getConfigIni()->getValue('disableCache', 'zones');

    $this->globalSetup->getConfigIni()->setValue('disableCache', false, 'zones');
</code>

When you modify a value, it modify the last file of the aggregator. So for 
@@$this->globalSetup->getConfigIni()@@, it will be @@mainconfig.ini.php@@;
For @@$entryPoint->getConfigIni()@@ it will be @@app/system/index/config.ini.php@@ etc..

If you want to read or modify a specific file, you can access from the aggregator by using
a key, as if the aggregator was an array.

   * @@$this->globalSetup->getConfigIni()['default']@@ for @@lib/jelix/core/defaultconfig.ini.php@@
   * @@$this->globalSetup->getConfigIni()['main']@@ for @@mainconfig.ini.php@@
   * @@$this->globalSetup->getLocalConfigIni()['local']@@ for @@var/config/localconfig.ini.php@@
     (ainsi que @@['default']@@, @@['main']@@)
   * @@$entryPoint->getConfigIni()['entrypoint']@@ for @@app/system/index/config.ini.php@@
     (ainsi que @@['default']@@, @@['main']@@)
   * @@$entryPoint->getLocalConfigIni()['localentrypoint']@@ for @@var/config/index/config.ini.php@@
     (as well as @@['default']@@, @@['main']@@, @@['entrypoint']@@ and @@['local']@@)

It returns an object @@\Jelix\IniFile\IniModifier@@ that have same methods, @@getValue()@@, @@setValue()@@...

See the documentation of [[https://github.com/jelix/inifile|this library jelix/Inifile]] for
details.

==== Main properties or methods ====

Here are some of methods or properties you can use on the parameter @@jInstallerEntryPoint2@@:

  * @@$entryPoint->declareWebAssets()@@: declare web assets
  * @@$entryPoint->execSQLScript()@@: execute an SQL script which is in a module of the entry points
    (see similar method on @@jInstallerModule2@@).
  * @@$entryPoint->getUrlMap()@@ to read/modify URL mapping for the entry point.
  * @@$entryPoint->getType()@@, @@$entryPoint->getScriptName()@@, @@$entryPoint->getFileName()@@ 
    to know properties of the entry point.

Your install class has these following methods and properties:

  * @@$this->globalSetup@@ is a @@jInstallerGlobalSetup@@ object allowing to access
    to the global configuration, url configuration and other global data
    * @@$this->globalSetup->getUrlModifier()@@ is an object @@XmlMapModifier@@ to read/modify url
    * @@$this->globalSetup->declareNewEntryPoint()@@ to declare a new entry point.
  * @@$this->dbConnection()@@: it returns a @@C@jDbConnection@@ object. Don't
    call @@jDb::getConnection()@@, because you don't really know which is the
    profile used for the module.
  * @@$this->execSQLScript()@@: it executes a SQL script stored into the
    @@F@install/@@ directory (or in one of its sub directory). Indicates a
    simple name, and it will load the script @@F@{name}.{dbtype}.sql@@. for
    example, if you call @@$this->execSQLScript('sql/install')@@ and if the
    database of the default profile is mysql, it will load the file
    @@F@sql/install.mysql.sql@@. You can indicate the full name of the sql
    script, but it should be compatible to all databases supported by your
    application.
  * @@$this->declareDbProfile()@@ to declare a new connection profile
  * @@$this->getCoordPluginConf()@@ to get the configuration of a plugin for the coordinator
  * @@$this->declareGlobalWebAssets()@@ to declare web assets
  * @@$this->copyFile()@@ to copy a file, from the @@install/@@ directory 
    to an other directory of your project. The first parameter is the path of 
    the file to copy, relative to the @@install/@@ directory. The second parameter
    is the target path. The target path can be an absolute path, or a prefixed path.
    Prefixes can be @@www:@@ indicating the www/ directory, @@appconfig:@@ indicating app/system,
    or @@config@@ indicating var/config.
  * @@$this->copyDirectoryContent()@@ to copy content of a directory, from the install
    directory to another place, typically to the @@F@www/@@ of the application. It works
    like @@$this->copyFile()@@

Don't hesitate to read the reference API of @@C@jInstallerModule2@@ and
@@C@jInstallerBase@@, and to look at the installation script of modules provided
by Jelix. You'll certainly learn many things.


==== To not execute some part of your script ====

You notice that in the example, we call the method @@M@firstDbExec@@. It tells you if this
is the first time that you want to access to the database, for the current database
profile (some entry points can share the same database profile). Remember that your
installation script is called for each entry points (read above).

You have also the method @@M@firstConfExec@@ to know if you did already have some changes
to the current configuration file (some entry points can share the same configuration
file, other than @@mainconfig.ini.php@@). If it returns true, you can then access to
the configuration file, by retrieving the configuration object with @@$entrypoint->getConfigIni()@@.

Then you have the method @@M@firstExec@@. You pass a keyword to this method. And it tells
you if you already call this method with this keyword (false) or not (true). You call this
method to determine yourself, in some conditions, if you want to execut several time a
part of your installation script.

==== Database profile used for the installation ====

If your installation script interacts with a database (creating a table, modifying records
in some tables etc), you have to use the method @@M@dbConnection()@@ or
@@M@execSQLScript@@ to exécute queries. By default, it uses the "default" profile. An
alternate profile can be indicated in several places (listed by priority, the first has
the higher priority):

    * In your install class, you call @@M@useDbProfile@@, by given the profile you want to use.
    * In the property @@P@defaultDbProfile@@ of your install class, you can indicate the default profile to use for the installation of the module

==== Parameters for an installation ====

You may want to execute the installation with some parameters given by the user
of your module.

Parameters for an installation script can be simple booleans, or some values. To
indicate parameters, the user have to set an option in the @@modules@@ section
of the configuration file of the application. The name of this option is
@@{module}.installparam@@. For example, for a @@news@@ module, it will be
@@news.installparam@@.

In this option, you can indicates simple names (it will be some booleans), or
some names and values.

<code ini>
news.installparam = "enablecategories,defaultcategory=In the world"
</code>

Here, parameters will be a boolean named "enablecategories", and a parameter
named "defaultcategory" with the value "In the world". We can imagine here that
the installation script of the module "news" have the possibility to enable a
"categories" management, and we could indicate the name of the default category
to create.

To read parameters from the installation script, you have the @@M@getParameter@@
method. Indicates the name of the parameter, and it will return its value (true
for a boolean). If the parameter does not exists in the installparam option, it
returns @@null@. Example:

<code php>
  function installEntryPoint(jInstallerEntryPoint2 $entryPoint) {
     if ($this->getParameter('enablecategories')) {
        // here some code to create the categories table for example...
        // ...

        // now create the default category
        $defaultCategory = $this->getParameter('defaultcategory');
        if ($defaultCategory) {
           // here we could insert a record in the categories table
           // with the label given into $defaultCategory.
        }
     }
  }
</code>



===== Scripts to update a module =====

These scripts have specific file names: @@F@upgrade_{label}.php@@ where
@@{label}@@ is a name which will be part of the name of the class.

Note: In jelix 1.2.5 and lower, the filename could be
@@F@upgrade_to_{version}_{label}.php@@, where @@{version}@@ should be replaced
by a version number. This format is now deprecated.

These scripts should be stored into the @@F@install/@@ directory of the module.
They will be executed in the ascendant order of the version indicated into the
filename. And only those for which the version is higher than the current
installed version of the module, and lower and equal than the new version of the
module. Imagine that you have these scripts (with deprecated format of names):

    * @@F@upgrade_to_1.0_aaa.php@@ (old name)
    * @@F@upgrade_zzz.php@@ (declaring version 1.1pre.1234 in the class)
    * @@F@upgrade_foo.php@@ (declaring version 1.1pre.1350)
    * @@F@upgrade_bar.php@@ (declaring version 1.1)
    * @@F@upgrade_fff.php@@ (declaring version 1.2a1)
    * @@F@upgrade_eee.php@@ (declaring version 1.2)
    * @@F@upgrade_hello.php@@ (declaring version 1.3)


If the current version of the module is 1.1 and the new version of the module
(indicated by the new @@F@module.xml@@ file) is 1.2, then only these scripts
will be executed, in this order:

    * @@F@upgrade_fff.php@@
    * @@F@upgrade_eee.php@@

A script for update should contain a class, named
@@{module}ModuleUpgrader_{label}@@, where @@{module}@@ should be the module
name, and @@{label}@@, the label indicated in the filename of the script.

Because several scripts for update can be executed for the module, then class
name must be different (else PHP won't like it). This is why we use a label,
which **should be different for each script of a module**. (Jelix developers
could use the version number instead of a label, but unfortunately, PHP doesn't
like characters like "." or "-" in a class name).

The class should inherit from @@M@jInstallerModule2@@, so you have exactely same
behaviors and methods as in installation script. So you must implements a method
@@M@installEntryPoint()@@, you can call @@M@firstDbExec@@, @@M@getParameter@@ etc..

As we saw, a class is doing an update for a specific version. You must indicate
the version number into the property @@P@$targetVersions@@ (which is an array),
and a date in the property @@P@$date@@ with the format 'yyyy-mm-dd' or
'yyyy-mm-dd HH:ii'.

<code php>
<?php
class newsModuleUpgrader_fff extends jInstallerModule2 {

    public $targetVersions = array('1.2');
    public $date = '2001-06-21';

    function installEntryPoint(jInstallerEntryPoint2 $entryPoint)  {
       // ....
    }

} 
</code>

You'll guess that you can indicate several versions in @@P@$targetVersions@@. It
is useful when you have several branch in a project, and when an update script
should be executed for several branch. With the date of the release, Jelix can
determinate if, during an update, it can execute the script or not. 

For instance, you have a script for an update for versions 1.24 and 1.35. If the
user update from the version 1.2.3 or from the version 1.3.4, the script will be
called. If he update from the version 1.2.5 to the version 1.3.6, the script
won't be called because the 1.2.6 version contains modifications brought by the
1.2.5 version.

