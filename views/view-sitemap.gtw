~~LANG:FR@frman:vues/vue-sitemap~~

jResponseSitemap allow you to generate a [[https://www.sitemaps.org/|sitemap]],
used by search engines like Google.

===== Download and install =====

Since Jelix 1.7, the class jResponseSitemap and its dependencies are in a separate
module, that you have to download and install. A zip file is available, or you 
can install it with Composer: 
[[https://packagist.org/packages/jelix/sitemap-module|package jelix/sitemap-module]].

<code bash>
composer require "jelix/sitemap-module"
</code>

Then declare the module into the configuration:

<code ini>
[modules]
jsitemap.access=1
</code>

Then launch the installer:

<code bash>
php yourapp/cmd.php install
</code>

===== Usage =====

Retrieve the response object in the controller:
 
<code php>
$resp = $this->getResponse('sitemap');
</code>

You have then a @@C@jResponseSitemap@@ object in @@V@$resp@@.


===== Restrictions in a sitemap =====

  * A sitemap file cannot contain more than 50 000 URLs.
  * A sitemap index file cannot declare more than 1000 sitemap files.

===== Manual generation =====

Creation of a sitemap is done by adding each URLs you want to declare in the file:

<code php>
$resp->addUrl($loc, $lastmod, $changefreq, $priority);
</code>

  * @@V@$loc@@: URL of the page
  * @@V@$lastmod@@: date of the last modification of the page. format: Y-m-d.
  * @@V@$changefreq@@: Frequency of the page modifications (only these value: always, hourly, daily, weekly, monthly, yearly, never)
  * @@V@$priority@@: priority of the url beside other URL you declare.

Only @@V@$loc@@ is required.


Example:

<code php>
$resp->addUrl(jUrl::get('module~home:index'));
$resp->addUrl(jUrl::get('module~contact:index'), null, 'weekly', 1);
</code>

===== Automatic generation from the urls.xml file =====

This behavior is only possible if you use the significant url engine.

You just have to call one method:
<code php>
$resp->importFromUrlsXml();
return $resp;
</code>

===== Index generation =====

If you have a big web site, it is prefered to have many files, and declare them
in an index. You declare by calling this method:

<code php>
$resp->addSitemap($loc, $lastmod)
</code>

  * @@V@$loc@@: URL of a sitemap
  * @@V@$lastmod@@: date of the last modification of the page. format: Y-m-d.

Only @@V@$loc@@ is required.

It means that you have to create as many action as you want to generate sitemap files, and declare their URL in the urls.xml file. In an other action, you generate the index. You can call @@jUrl::get@@ for each sitemap and assign this value to @@$loc@@

<code php>
$resp->addSitemap(jUrl::get('mymodule~sitemap:s1');
$resp->addSitemap(jUrl::get('mymodule~sitemap:s2');
$resp->addSitemap(jUrl::get('mymodule~sitemap:s3');
$resp->addSitemap(jUrl::get('mymodule~sitemap:s4');
return $resp;
</code>

(s1, s2, s3 and s4 are actions where you generate a sitemap).

===== Registering your sitemap into search engines =====

To give the address of your sitemap to search engines, you can do it manually by
filling the corresponding form on the web site of the search engine.

You can also do it automatically, by giving the URL of the registration process
of the search engine, to the @@M@ping()@@ method:

<code php>
$sitemapurl = jUrl::get('mymodule~sitemap:index');
$url = 'http'. (empty($_SERVER['HTTPS']) ? '' : 's') .'://'. $_SERVER['HTTP_HOST'] . urlencode($sitemapurl);

// google
$resp->ping('http://www.google.com/webmasters/tools/ping?sitemap=' . $url);

// yahoo
$resp->ping('http://search.yahooapis.com/SiteExplorerService/V1/updateNotification?appid=YahooDemo&url=' . $url);

// Live
$resp->ping('http://webmaster.live.com/ping.aspx?siteMap='.$url);

// Ask
$resp->ping('http://submissions.ask.com/ping?sitemap=' . $url);
</code>

