~~LANG:FR@frman:plugins/coord~~

Adding coordinator (jelix core class) plugins allows you to customize different steps of the processing of any action.  

You can execute some code, at process start, before action execution, after action execution (but before display), at process end. 

Note: Coordinator plugins are commonly named //plugin coord// in Jelix.




===== Activate a coord. plugin =====

You need to modify entry point configuration file. It could be
@@F@var/config/index/config.ini.php@@ if it is for index.php.

  * [[/plugins#adding-a-plugins-repository|add its repository]] e.g the parent
    directory of your plugin one to configuration. Set //pluginsPath// option as
    this purpose.
  * Add the plugin name to @@[coordplugins]@@ sections and set it ot "1" or
    to the configuration file name if needed.

Example: your plugin is located in //foo// folder of @@F@<application name>/plugins/coord/@@.
Your config file should look like:

<code ini>
pluginsPath = app:plugins/

[coordplugins]
foo = foo.plugin.ini.php
</code>


@@F@foo.plugin.ini.php@@ is a dedicated config file. Its content and structure
depends only on the plugin. Having a plugin configuration file is not required.
In that case, you should assign //1// to your plugin name:

<code ini>
[coordplugins]
foo = 1
</code>

Since Jelix 1.3, @@"1"@@ means also that the configuration of the plugin can be inside
the configuration file of the entry point. It should be into a @@[coordplugin_XXX]@@
section (where XXX is the name of the plugin, like @@[coordplugin_foo]@@).

**Important**: If you use several coordinator plugins, the order of the plugins
declaration in the config file matters. Hence the first declared plugin has precedence on the
others. It means that if this first plugin returns an action, the other ones
will not be executed. So you need to choose carefully the order of the plugins
declaration according to the priority you wish for every plugin. For example if
you consider that the //bar// plugin cannot be executed as long as the //foo//
plugin does not return any action, then you should declare them this way:

<code ini>
[coordplugins]
foo = foo.plugin.ini.php
bar = 1
</code>

===== Plugin configuration =====

In order to configure a plugin, you might have declared a specific configuration
file (see above). It is an //ini// file, located in @@F@var/config/@@. Its content
will be passed as argument to your plugin constructor as an array.

==== Plugin parameters ====

As said before, your plugin might need some options or parameters. Those can be
set in a config file but also within controllers. Indeed, your plugin might do
different treatments for each controller actions. 

As an example, jAuth plugin checks if an action needs authentication or not.
Each controller will set a parameter for each action indicating wether
authentication is needed. 

There is a member of the controller to serve this purpose: @@P@pluginParams@@. It is
an associative array. Its keys are method names (actions names) and its values
are arrays setting all plugins parameters. The key @@*@@ covers all methods or
actions.

Code Example:

<code php>

public $pluginParams = array(
      '*'=>array('auth.required'=>false)
    );
</code>

Result: the plugin parameter //auth.required// is set to false for all methods.


===== Plugin development =====

Concretely a plugin must implement @@jICoordPlugin@@ interface.
And so declare the following methods:

<code php>
    public function __construct($config);
    public function beforeAction($params);
    public function beforeOutput();
    public function afterProcess ();
</code>

Class constructor receive its plugin configuration.

@@M@beforeAction@@ method received plugin parameters set by controllers. It can
return @@null@@ if all is ok, or an object @@C@jSelectorAct@@ (action selector) if
another action must be executed (sort of redirection).

@@M@beforeOutput@@ will be called after action execution.

@@M@afterProcess@@ method will be called at the end of coordinator processing,
thus just before display.

The class must be located in a [[/plugins#adding-a-plugins-repository|plugins repository]]:
@@F@plugins/@@ application folder or a @@F@plugins/@@ module folder
are possible candidates. See [[/plugins|page on plugins]].

For an //example// plugin:

   * plugin folder will be @@F@plugins/coord/example/@@.
   * its file will be @@F@plugins/coord/example/example.coord.php@@
   * its class will be @@CexampleCoordPlugin@@ and will implement @@C@jICoordPlugin@@ interface.

